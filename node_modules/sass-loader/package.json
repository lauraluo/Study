{
  "name": "sass-loader",
  "version": "0.5.0",
  "description": "SASS loader for Webpack",
  "main": "index.js",
  "scripts": {
    "pretest": "node test/prepare.js",
    "test": "mocha -R spec",
    "test-source-map": "webpack --config test/sourceMap/webpack.config.js && open ./test/sourceMap/index.html"
  },
  "keywords": [
    "sass",
    "webpack",
    "loader"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jtangelder/sass-loader.git"
  },
  "author": {
    "name": "J. Tangelder"
  },
  "license": "MIT",
  "dependencies": {
    "loader-utils": "^0.2.5",
    "node-sass": "^3.0.0-pre",
    "sass-graph": "^1.0.3"
  },
  "devDependencies": {
    "css-loader": "^0.9.1",
    "extract-text-webpack-plugin": "^0.3.8",
    "mocha": "^2.0.1",
    "raw-loader": "^0.5.1",
    "should": "^5.0.1",
    "webpack": "^1.4.0"
  },
  "readme": "# sass loader for [webpack](http://webpack.github.io/)\n\n## Install\n\n`npm install sass-loader`\n\n## Usage\n\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\n\n``` javascript\nvar css = require(\"!raw!sass!./file.scss\");\n// => returns compiled css code from file.scss, resolves imports\nvar css = require(\"!css!sass!./file.scss\");\n// => returns compiled css code from file.scss, resolves imports and url(...)s\n```\n\nUse in tandem with the [`style-loader`](https://github.com/webpack/style-loader) to add the css rules to your document:\n\n``` javascript\nrequire(\"!style!css!sass!./file.scss\");\n```\n\n### Apply via webpack config\n\nIt's recommended to adjust your `webpack.config` so `style!css!sass!` is applied automatically on all files ending on `.scss`:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loader: \"style!css!sass\"\n      }\n    ]\n  }\n};\n```\n\nThen you only need to write: `require(\"./file.scss\")`.\n\n### SASS options\n\nYou can pass any SASS specific configuration options through to the render function via [query parameters](http://webpack.github.io/docs/using-loaders.html#query-parameters).\r\n\r\n``` javascript\r\nmodule.exports = {\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: \"style!css!sass?outputStyle=expanded&\" +\n          \"includePaths[]=\" +\n            (path.resolve(__dirname, \"./bower_components\")) + \"&\" +\n          \"includePaths[]=\" +\n            (path.resolve(__dirname, \"./node_modules\"))\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\n\nSee [node-sass](https://github.com/andrew/node-sass) for all available options.\n\n### .sass files\n\nFor requiring `.sass` files, add `indentedSyntax=sass` as a loader option:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.sass$/,\n        // Passing indentedSyntax query param to node-sass\n        loader: \"style!css!sass?indentedSyntax=sass\"\n      }\n    ]\n  }\n};\n```\n\n## Source maps\n\nBecause of browser limitations, source maps are only available in conjunction with the [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin). Use that plugin to extract the CSS code from the generated JS bundle into a separate file (which even improves the perceived performance because JS and CSS are loaded in parallel).\n\nThen your `webpack.config.js` should look like this:\n\n```javascript\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    ...\n    // must be 'source-map' or 'inline-source-map'\n    devtool: 'source-map',\n    module: {\n        loaders: [\n            {\n                test: /\\.scss$/,\n                loader: ExtractTextPlugin.extract(\n                    // activate source maps via loader query\n                    'css?sourceMap!' +\n                    'sass?sourceMap'\n                )\n            }\n        ]\n    },\n    plugins: [\n        // extract inline css into separate 'styles.css'\n        new ExtractTextPlugin('styles.css')\n    ]\n};\n```\n\nIf you want to view the original SASS files inside Chrome and even edit it,  [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). Checkout [test/sourceMap](https://github.com/jtangelder/sass-loader/tree/master/test) for a running example. Make sure to serve the content with an HTTP server.\n\n\n## Caveats\n\nCurrently the sass-loader does not follow all of the webpack loader guidelines. The general problem is that the entry scss-file is passed to [node-sass](https://github.com/sass/node-sass) which does pretty much the rest. Thus `@import` statements inside your scss-files cannot be resolved by webpack's resolver. However, there is an [issue for that missing feature in libsass](https://github.com/sass/libsass/issues/21).\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jtangelder/sass-loader/issues"
  },
  "_id": "sass-loader@0.5.0",
  "dist": {
    "shasum": "6346452332ee4f6dfa9f07aaacb0ccfe84d302f7"
  },
  "_from": "sass-loader@0.5",
  "_resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-0.5.0.tgz"
}
